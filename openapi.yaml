openapi: 3.0.3
info:
  version: "1.0"
  title: CarApps
  description: |-
    This is a sample Cars Store Server based on the OpenAPI 3.0 specification.  
servers:
  - url: http://localhost:9000
paths:
  /update:
    put:
      summary: Update car detail
      description: Update an existing car by Id
      operationId: updateCar
      requestBody:
        description: Update an existent car in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200'          
        '404':
          description: Car Record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response404'    
  /add:  
    post:
      summary: Add a new car or cars to the store
      description: Add a new car or cars to the store
      operationId: addCar
      requestBody:
        description: Create a new car(s) in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cars'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddResponse'          
  /all:
    get:
      summary: Lists all car records in store
      description: Lists all car records in store
      operationId: listCars
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cars'         
        '404':
          description: Invalid status value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAllResponse'
  /get:
    get:
      summary: List Car by ID
      description: List Car by ID
      operationId: listCarById
      parameters:
        - name: id
          in: query
          description: id to filter by
          required: true
          explode: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Car'          
        '404':
          description: Invalid Id value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCarByIDResponse'
components:
  schemas:
    Cars:
      type: array
      items:
        $ref: '#/components/schemas/Car'
    Car:
      properties:
        id:
          type: integer
          format: int64
          example: 123
        make:
          type: string
          format: int64
          example: Mercedes
        model:
          type: string
          format: int64
          example: 230d
        package:
          type: string
          format: int64
          example: S-Class
        color:
          type: string
          format: int64
          example: Matte Black
        year:
          type: integer
          format: int64
          example: 2021
        category:
          type: string
          format: int64
          example: Sedan
        mileage:
          type: integer
          format: float64
          example: 15.1
        price:
          type: integer
          format: int64
          example: 7200000
    GetCarByIDResponse:
      type: object
      properties:
        code:
          type: integer
          example: 404
        success:
          type: boolean
          example: false
        message:
          type: string
          example: No car records found against this ID
    ListAllResponse:
      type: object
      properties:
        message:
          type: string
          example: No Record(s) present in store
    AddResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Data stored successfully
        count:
          type: integer
          example: 3
    Response200:
      type: object
      properties:
        code:
          type: integer
          example: 200
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Data Stored Successfully
    Response404:
      type: object
      properties:
        code:
          type: integer
          example: 404
        success:
          type: boolean
          example: false
        message:
          type: string
          example: Unable to find record